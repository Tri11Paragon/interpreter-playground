program -> (function | class)*

function -> 'fun' IDENTIFIER scope+ 

class -> 'class' IDENTIFIER '{' (variable_decl | function)* '}'

scope -> '{' (scope | statement)* '}' 

variable_decl -> ('const' | 'var') IDENTIFIER (';' | '=' (expression | scope))

statement -> (variable_decl | control_flow | return) ';'

return -> 'return' variable

control_flow -> "if" (expression | variable_decl | '(' variable_decl ')' all_compare expression) scope ("else" scope | EMPTY) | 
                "while" (expression | variable_decl | '(' variable_decl ')' all_compare expression) scope | 
                "for" for_expression scope

for_expression -> (variable_decl | EMPTY) ';' expression ';' 

for_increment -> (expression | (expression ',' for_increment)+)

compare_equality -> ( "!=" | "==" )
compare_relationship ->( ">" | ">=" | "<" | "<=" )
all_compare -> compare_equality | compare_relationship

expression -> equality
equality -> comparison (compare_equality  comparison )*
comparison -> term (compare_relationship  term )*
term -> factor ( ( "-" | "+" ) factor )*
factor -> unary ( ( "/" | "*" ) unary )*
unary -> ( "!" | "-" ) unary | primary
primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | variable

variable -> IDENTIFIER | variable '.' variable
